VOXI_DIR = ..
include ../Makerules.msvc

LIBNAME = util
LIB_OBJS = threadpool bag idTable file threading geometry vector \
            memory time err bt hash mem shlib sock textRPC libcCompat \
            strbuf win32_glue path license circularBuffer bitFippling

LIB_OBJFILES = $(addprefix $(OBJDIR)/, $(addsuffix $(OBJ_EXT), $(LIB_OBJS)))
LIB_DEPFILES = $(addprefix $(OBJDIR)/, $(addsuffix .d, $(LIB_OBJS)))

CPPFLAGS = $(CPPFLAGS_GLOBAL) -DLIB_UTIL_INTERNAL \
  $(CPPFLAGS_PTHREADS_WIN32) $(CPPFLAGS_OPENSSL)
CFLAGS = $(CPPFLAGS) $(CFLAGS_GLOBAL)
LDFLAGS = -nodefaultlib:libc $(SHLIB_FLAGS) -libpath:../lib \
  $(LDFLAGS_PTHREADS_WIN32) $(LDFLAGS_OPENSSL)
LOADLIBES = wsock32.lib msvcrt.lib $(LOADLIBES_PTHREADS_WIN32) \
  $(LOADLIBES_OPENSSL)

all: ../lib/$(LIBNAME).dll ../lib/$(LIBNAME).lib
exports: ../lib/$(LIBNAME).lib

# Needed since GNU make doesn't have default rules for .obj files (only .o)
$(OBJDIR)/%.obj: %.c
	$(CC) -c $(DEBUGFLAGS) $(CFLAGS) /Fo$@ $<

# Make a shared library
../lib/$(LIBNAME).dll: $(LIBNAME).def $(LIB_OBJFILES)
	$(LD) -def:$< $(LDFLAGS) $(DEBUGFLAGS_LD) -out:$@ $(LOADLIBES) $(LIB_OBJFILES)

# Make an import library to be used in dynamic compile-time linking.
../lib/$(LIBNAME).lib: $(LIBNAME).def
	lib -def:$^ -out:$@

# Make the export definitions (.def) file used when creating a DLL.
# Note that we have to explicitly remove exporting of MSVC-introduced
# float and double symbols, beginning with _real@4@ and _real@8@.
$(LIBNAME).def: $(LIB_OBJFILES)
	dlltool --export-all-symbols --output-def temp.def $^
	grep -v '_real@[0-9]' temp.def > $@
	rm -f temp.def

# Magical rule to automatically generate dependencies.  See make.info,
# node "Automatic Dependencies". The sed line makes also the .d and .obj
# files depend on whatever the .o file depends on.
$(OBJDIR)/%.d: %.c
	$(SHELL) -ec '$(GCC) -M $(CPPFLAGS) $< \
                | sed '\''s/\($*\)\.o[ :]*/$(OBJDIR)\/\1.o $(OBJDIR)\/\1.obj $(OBJDIR)\/\1_g.obj $(subst /,\/,$@): /g'\'' > $@'
include $(LIB_DEPFILES)

test:

# Cleanup
clean:
	rm -f *.obj
	rm -f *.def
	rm -f $(OBJDIR)/*$(OBJ_EXT)
	rm -f $(OBJDIR)/*.def
	rm -f $(OBJDIR)/*.d
	rm -f *~
